1.什么是程序：可执行文件
2.什么是进程：资源分配的基本单位
3.什么是线程：调度执行的基本单位，多个线程共享同一个进程的资源
4.线程切换：正在执行的线程数据放在cpu寄存单元进行计算，操作。线程切换时，会将当前线程的数据和指令地址放入缓存，然后将另外的线程
的指令和资源放入cpu,线程的切换都是操作系统处理的，cpu只是单纯的计算
5.单核cpu设定多线程是否有意义：有，因为并不是所有操作都是即时的，有的线程可能在等待结果的返回，不需要消耗cpu
6.线程数是否设计越大越好：不是，线程之间的切换也需要消耗资源
7.线程池中的数量设置多少合适

一.启动线程的五种方法：
1.new MyThread().start()
2.new Thread(Runnable r).start();
3.new Thread(lamda).start();
4.ThreadPool;
5.Future callable AND  FutureTask[new Thread(FutureTask f).start]

二.线程的状态
1.NEW 线程刚刚创建，还没有启动
2.RUNNABLE 可运行状态，由线程调度器安排执行，包含两个状态 RUNNING(正在执行状态) READY(线程挂起，等待CPU)
3.WAITING 等待被唤醒  调用 wait join park lock 等方法
4.TIMED WAITING 等待一段时间被唤醒 sleep join(time) park(time) 设置了时间的等待方法
5.BLOCKED 被阻塞，正在等待锁(sync)
6.TERMINATED 线程结束

