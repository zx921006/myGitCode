抽象工厂：
    在我们项目中定义了一个抽象工厂(abstractFactory)，里面定义了我们平台的用户产出，直播间产出等抽象方法（demo是食物，交通工具
 武器等），然后再定义一个族工厂（magicFactory,ModernFactory分别代表科技工厂和现代工厂），最后我们可以根据需要让每一个实例来继承
 相应的工厂，如：现代人吃面包（Bread)则让Bread实体继承现代工厂（ModernFactory)，然后我们通过现代工厂产生的动作就是Bread里面的方法
 动作，如果是科技工厂，他们的动作是MushRoom,则让MushRoom继承magicFactory,然后通过magicFactory制造出来的对象就是MushRoom所产生的动
 作。
    在我们实际项目中，我们定义了一个抽象工厂，里面抽象方法分别是创建用户，创建房间等等。。。，在我们平台有新用户注册的时候，由于我
们有不同的套餐类型（试用，流量，包月等等）,所以我们创建了一个试用用户工厂，一个包月用户工厂分别来继承抽象工厂，然后在每一个工厂里面
都有相对应的套餐业务处理，所有不同的用户根据不同的工厂来决定赋予该用户什么权限。
    为什么用到这个工厂模式，因为考虑到随着业务的迭代，后续套餐类型或者直播类型种类会添加，如果没有工厂来生产自动对应的用户以及权限
的话，我们必须在用户注册的业务代码里面添加逻辑，有可能还需在其他业务内添加逻辑。但是有了工厂模式，我们完全可以在外面拓展，我们只需
新建 一个套餐工厂类型来完成用户权限，套餐的赋予，而不需要去更改原来的业务逻辑